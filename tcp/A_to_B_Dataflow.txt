Computer A wants to send the message:
data := "hello b"
to Computer B using the TCP/IP protocol stack.
                        
                        TCP/IP Protocol Stack Overview
 Layer           Equivalent OSI Layer          Main Role                                               
 Application     Application/Presentation/Session  Prepares user data for transmission                         
 Transport       Transport                         Ensures reliable or unreliable data transfer (TCP or UDP)   
 Internet        Network                           Routes the packet to the destination (IP addresses)         
 Network Access  Data Link + Physical              Handles physical transmission (MAC addresses, bits, frames) 







              🧑‍💻 1. Application Layer (Sender - A)
Protocols involved: HTTP, FTP, SMTP, etc.
For our case, let's assume a custom application using TCP 
(like an HTTP request).

Example in Go:
conn, _ := net.Dial("tcp", "192.168.1.2:8080")
fmt.Fprintf(conn, "hello b")
What happens:
            Message "hello b" is generated by the application.
            No headers are added here by TCP/IP yet.
            Passes raw data to the Transport Layer.





            📦 2. Transport Layer (TCP - Sender)
Protocol: TCP (Transmission Control Protocol)

Main Jobs:
Establish a reliable connection with B.
Break the message into segments if needed.
Add TCP header: source port, destination port, sequence number, checksum, etc.

Packet:
        [TCP HEADER | "hello b"]
What Happens:
TCP uses a 3-way handshake (SYN, SYN-ACK, ACK) before 
sending.

Adds reliability features: retransmission, sequencing, 
acknowledgment.

Passes the segment to the Internet Layer.




              🌐 3. Internet Layer (IP - Sender)
Protocol: IP (Internet Protocol)

Main Jobs:
Add IP header with:
      Source IP (e.g., A: 192.168.1.1)
      Destination IP (e.g., B: 192.168.1.2)
      TTL (Time To Live), Protocol (TCP), etc.
Handle packet routing.

Packet:
[IP HEADER | TCP HEADER | "hello b"]

What Happens:
Data is wrapped in an IP packet.
IP chooses best route to reach destination.
Passes to the Network Access Layer.



          🧱 4. Network Access Layer (Link + Physical - Sender)
Protocols: Ethernet, Wi-Fi, etc.

Main Jobs:
Add MAC (Media Access Control) headers and trailers.
Converts data to bits and sends over physical medium (cable, radio waves).

Frame:
[MAC HEADER | IP HEADER | TCP HEADER | "hello b" | MAC TRAILER]

What Happens:
Data is sent as frames over the wire or wireless.
Sent as electrical signals (or photons for fiber, or radio waves).
Reaches B’s physical interface (e.g., NIC).

          📥 Now at Receiver Side: B


🧱 1. Network Access Layer (Receiver - B)
            Receives the frame.
            Checks for errors using MAC trailer.
            Removes MAC headers.
            Passes the IP packet up.

🌐 2. Internet Layer (Receiver - B)
            Reads the IP header.
            Verifies it's meant for B.
            Strips the IP header.
            Passes TCP segment to Transport Layer.

📦 3. Transport Layer (Receiver - B)
            Uses TCP to reassemble segments.
            Verifies checksum.
            Sends acknowledgment to A.
            Removes TCP headers.
            Passes data up.

🧑‍💻 4. Application Layer (Receiver - B)
            Receives raw data: "hello b"
            Passes it to the application logic (e.g., a Go program, browser, HTTP server).

Sender A (App):         "hello b"
      ↓
Transport (TCP):        [TCP Header + "hello b"]
      ↓
Internet (IP):          [IP Header + TCP + "hello b"]
      ↓
Link Layer (Ethernet):  [MAC + IP + TCP + "hello b"]
      ↓
Physical Medium:        --> --> --> B receives bits --> -->
      ↓
B (NIC):                Extracts MAC → Sends to IP Layer
      ↓
IP Layer:               Extracts IP → Sends to TCP Layer
      ↓
TCP Layer:              Extracts TCP → Sends to App
      ↓
Application:            Gets "hello b"

