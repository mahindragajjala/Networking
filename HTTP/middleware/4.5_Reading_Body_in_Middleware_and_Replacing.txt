4.5_Reading_Body_in_Middleware_and_Replacing

In Go (and Gin), the request body is an io.ReadCloser and can only be read once. 
After it's read (e.g. in middleware), it disappears for the next handler unless you replace it.

This middleware is useful when:
                You want to log, inspect, or sanitize the body.
                You need to add checks (e.g., auditing JSON data before handler).
                You want to modify certain values before the final handler uses them.
‚úÖ Step-by-Step Flow
            Read the original body.
            Optionally log or modify the data.
            Replace the body with a new io.NopCloser using the updated content.
            Pass control to the next handler.

                              package main
                              
                              import (
                              	"bytes"
                              	"io"
                              	"io/ioutil"
                              	"log"
                              	"strings"
                              
                              	"github.com/gin-gonic/gin"
                              )
                              
                              func ReadAndReplaceBodyMiddleware() gin.HandlerFunc {
                              	return func(c *gin.Context) {
                              		// Step 1: Read the body (will consume it)
                              		bodyBytes, err := ioutil.ReadAll(c.Request.Body)
                              		if err != nil {
                              			c.AbortWithStatusJSON(400, gin.H{"error": "Cannot read body"})
                              			return
                              		}
                              		log.Println("üîç Original Body:", string(bodyBytes))
                              
                              		// Step 2: Modify body (optional)
                              		modified := strings.ReplaceAll(string(bodyBytes), "admin", "user")
                              
                              		// Step 3: Replace the body so that handler can read it again
                              		c.Request.Body = io.NopCloser(bytes.NewBufferString(modified))
                              
                              		// Continue to the next middleware/handler
                              		c.Next()
                              	}
                              }
Handler that reads the modified body:
                            func HandlePost(c *gin.Context) {
                            	var payload map[string]interface{}
                            	if err := c.BindJSON(&payload); err != nil {
                            		c.JSON(400, gin.H{"error": "invalid JSON"})
                            		return
                            	}
                            	c.JSON(200, gin.H{"received": payload})
                            }


***
 Consideration                      Explanation                                                  
 Body is readable once              You must replace it if you want the handler to access it 
 JSON modification is manual        You can use `encoding/json` to decode/edit/encode            
 Watch for large bodies             Reading entire body in memory may not scale well             
 Don‚Äôt mutate in non-JSON requests  Only parse if content-type is JSON or known                  
