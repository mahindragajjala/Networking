In web development, 
Middleware is a software layer that sits between the client and the server 
(or between different parts of the server) to process, modify, or inspect requests and responses.

simple explanation:
Middleware is like a gatekeeper or interceptor that:
Can log, authenticate, validate, or modify HTTP requests before they reach the main application logic.
Can also process the response before it's sent back to the client.


  
  It can 
        inspect, 
        modify, or 
        log the request/response, 
        perform authentication, 
        logging, 
        error handling, 
        rate limiting, etc.

  Middleware location :
                        Client (Browser, API client)
                            ↓
                        Middleware(s) - can be multiple
                            ↓
                        Routing Logic
                            ↓
                        Controller/Handler Function
                            ↓
                        Response Sent Back

   IN GIN FRAMEWORK:
                    Incoming HTTP Request
                           ↓
                    Global Middleware (applies to all routes)
                           ↓
                    Route Group Middleware (applies to grouped routes)
                           ↓
                    Route-Specific Middleware (applies to individual route)
                           ↓
                    Handler Function
                           ↓
                    Response

Types of middleware(by location in the gin)
         Location         Middleware Type            Where It's Added                       
         Global       Applies to all requests    `router.Use()`                         
         Group-level  Applies to specific group  `group.Use()`                          
         Route-level  Applies to a single route  `router.GET(..., middleware, handler)` 



package main

import (
    "github.com/gin-gonic/gin"
    "log"
    "time"
)

// Global middleware
func LoggerMiddleware(c *gin.Context) {
    t := time.Now()
    c.Next()
    log.Println("Request completed in:", time.Since(t))
}

// Route-specific middleware
func AuthMiddleware(c *gin.Context) {
    token := c.GetHeader("Authorization")
    if token != "secret" {
        c.AbortWithStatusJSON(401, gin.H{"error": "unauthorized"})
        return
    }
    c.Next()
}

func main() {
    r := gin.Default()

    // Global middleware
    r.Use(LoggerMiddleware)

    // Route without middleware
    r.GET("/public", func(c *gin.Context) {
        c.JSON(200, gin.H{"message": "public route"})
    })

    // Route with middleware
    r.GET("/private", AuthMiddleware, func(c *gin.Context) {
        c.JSON(200, gin.H{"message": "private route"})
    })

    r.Run(":8080")
}


✅ 1. Prerequisites (Must Learn Before Middleware)
To understand and write middleware in Go, you should know:

Topic	Why It’s Needed
✅ Basic Go Syntax	To write any Go program
✅ Functions and Closures	Middleware often uses functions returning other functions
✅ Interfaces	Middleware deals with http.Handler / gin.HandlerFunc
✅ Go HTTP Server (net/http)	Middleware wraps the HTTP request/response flow
✅ Request & Response objects	To manipulate headers, body, etc.
✅ Context (context.Context)	For request-scoped values and cancellation

Once these are clear, you're ready for middleware.

 Level                      Topic                                                                                                         
 🔰 Beginner                What is middleware
                            Why use middleware?
                            Middleware execution flow                                       
 🧰 Core Concepts           Writing custom middleware<br>Chaining middleware<br>Calling `Next()` to pass control                          
 🧪 Practical Middleware    Logging<br>Authentication<br>Authorization<br>Error handling<br>Panic recovery                                
 🌐 HTTP-level Middleware   Using `net/http`, wrap `http.Handler`<br>Implement your own middleware chain                                  
 ⚙️ Framework-Specific      Middleware in Gin, Echo, Chi, Fiber                                                                           
 📦 Third-Party Middleware  Using middleware packages (like `gin-contrib/cors`, `jwt`, etc.)                                              
 🧠 Advanced                Middleware ordering & short-circuiting<br>Context propagation across middleware<br>Performance considerations 
 📁 File Structure          Organizing middleware in large projects<br>Reusability and testability                                        
 🔐 Security Middlewares    Input validation<br>Rate limiting<br>CORS<br>Secure headers                                                   


🧪 Examples of Middleware You Should Learn to Build:
 Type          Description                                     
 ✅ Logger      Logs incoming requests and response times       
 ✅ Recover     Catches panics and returns HTTP 500             
 ✅ Auth        Checks API tokens, JWTs                         
 ✅ CORS        Adds CORS headers                               
 ✅ Throttling  Limits number of requests (rate limiting)       
 ✅ Metrics     Collects performance metrics (e.g., Prometheus) 
