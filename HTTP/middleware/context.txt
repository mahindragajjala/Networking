In web development, 
Middleware is a software layer that sits between the client and the server 
(or between different parts of the server) to process, modify, or inspect requests and responses.

simple explanation:
Middleware is like a gatekeeper or interceptor that:
Can log, authenticate, validate, or modify HTTP requests before they reach the main application logic.
Can also process the response before it's sent back to the client.


  
  It can 
        inspect, 
        modify, or 
        log the request/response, 
        perform authentication, 
        logging, 
        error handling, 
        rate limiting, etc.

  Middleware location :
                        Client (Browser, API client)
                            ↓
                        Middleware(s) - can be multiple
                            ↓
                        Routing Logic
                            ↓
                        Controller/Handler Function
                            ↓
                        Response Sent Back

   IN GIN FRAMEWORK:
                    Incoming HTTP Request
                           ↓
                    Global Middleware (applies to all routes)
                           ↓
                    Route Group Middleware (applies to grouped routes)
                           ↓
                    Route-Specific Middleware (applies to individual route)
                           ↓
                    Handler Function
                           ↓
                    Response

Types of middleware(by location in the gin)
         Location         Middleware Type            Where It's Added                       
         Global       Applies to all requests    `router.Use()`                         
         Group-level  Applies to specific group  `group.Use()`                          
         Route-level  Applies to a single route  `router.GET(..., middleware, handler)` 



package main

import (
    "github.com/gin-gonic/gin"
    "log"
    "time"
)

// Global middleware
func LoggerMiddleware(c *gin.Context) {
    t := time.Now()
    c.Next()
    log.Println("Request completed in:", time.Since(t))
}

// Route-specific middleware
func AuthMiddleware(c *gin.Context) {
    token := c.GetHeader("Authorization")
    if token != "secret" {
        c.AbortWithStatusJSON(401, gin.H{"error": "unauthorized"})
        return
    }
    c.Next()
}

func main() {
    r := gin.Default()

    // Global middleware
    r.Use(LoggerMiddleware)

    // Route without middleware
    r.GET("/public", func(c *gin.Context) {
        c.JSON(200, gin.H{"message": "public route"})
    })

    // Route with middleware
    r.GET("/private", AuthMiddleware, func(c *gin.Context) {
        c.JSON(200, gin.H{"message": "private route"})
    })

    r.Run(":8080")
}
