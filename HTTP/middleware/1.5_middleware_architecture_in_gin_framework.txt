ðŸ§© What Is Middleware in Gin?
                    In the Gin web framework, middleware is a first-class concept, 
                    integrated directly into its router system. 

Middleware in Gin is defined as a function with the signature:
func(c *gin.Context)

Each middleware:
              Receives the *gin.Context
              Can read/write request or response data
              Can abort the flow (c.Abort())
              Can continue to the next handler/middleware (c.Next())

GIN MIDDLEWARE LIFECYCLW FLOW:
                              [Client Request]
                                 â†“
                              [Global Middleware 1]
                                 â†“
                              [Global Middleware 2]
                                 â†“
                              [Route-specific Middleware]
                                 â†“
                              [Route Handler]
                                 â†‘
                              [Post Handler Logic (optional)]
                                 â†‘
                              [Response sent to Client]



BASIC MIDDLEWARE:
                  func LoggerMiddleware() gin.HandlerFunc {
                  	return func(c *gin.Context) {
                  		start := time.Now()
                  		log.Println("Started:", c.Request.URL.Path)
                  
                  		c.Next() // call the next handler
                  
                  		duration := time.Since(start)
                  		log.Println("Completed in:", duration)
                  	}
                  }




REGISTER MIDDLEWARE:
                    1. Global Middleware
                      Applied to all routes:
                      r := gin.Default() // includes Logger & Recovery middleware
                      r.Use(LoggerMiddleware())

                    2. Route Group Middleware
                      Apply only to a specific group of routes:
                      auth := r.Group("/auth")
                      auth.Use(AuthMiddleware()) // Only /auth/* routes
                      auth.GET("/profile", profileHandler)

                    3. Single Route Middleware
                      Use middleware inline with one route:
                      r.GET("/ping", LoggerMiddleware(), func(c *gin.Context) {
                      	c.String(200, "pong")
                      })



ðŸ§  Anatomy of Middleware Execution in Gin
                      func AuthMiddleware() gin.HandlerFunc {
                      	return func(c *gin.Context) {
                      		token := c.GetHeader("Authorization")
                      		if token != "valid-token" {
                      			c.AbortWithStatusJSON(401, gin.H{"error": "Unauthorized"})
                      			return
                      		}
                      		c.Next() // go to next middleware or handler
                      	}
                      }
                      c.Abort() stops further handlers from executing.
                      c.Next() continues the middleware/handler chain.



FLOW WITH TWO MIDDLEWARES:
                          r.Use(LoggerMiddleware())
                          r.Use(AuthMiddleware())
                          
                          r.GET("/home", func(c *gin.Context) {
                          	c.JSON(200, gin.H{"msg": "Welcome Home"})
                          })
Request Flow:
              Enters LoggerMiddleware
              Goes to AuthMiddleware
              Enters route handler
              Returns back up (post-handler logging, etc.)

BUILT-IN MIDDLE-WARE IN THE GIN
 Middleware         Purpose                              
 `gin.Logger()`     Logs incoming requests and responses 
 `gin.Recovery()`   Catches panics and prevents crashes  
 Custom Middleware  Auth, CORS, Rate Limiting, etc.      
