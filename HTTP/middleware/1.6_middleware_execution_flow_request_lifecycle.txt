üîÑ What Is Middleware Execution Flow?
                                      Middleware Execution Flow refers to the sequence 
                                      of steps a request goes through from
                                      the moment it enters the server until a 
                                      response is returned to the client. 

Middleware plays a crucial role in 
                                  pre-processing, 
                                  routing, and 
                                  post-processing that request.


NET/HTTP

Middleware in net/http wraps http.Handler functions in layers.

                          Client Request
                             ‚Üì
                          Outer Middleware (1st layer)
                             ‚Üì
                          Next Middleware (2nd layer)
                             ‚Üì
                          Final Handler (business logic)
                             ‚Üë
                          Returns up through middleware chain
                             ‚Üë
                          Response sent to Client
                          
                          
                          LoggingMiddleware(
                              AuthMiddleware(
                                  HelloHandler
                              )
                          )
üìú Step-by-step Flow:
                          LoggingMiddleware runs first (logs request path)
                          Calls next.ServeHTTP ‚Üí passes to AuthMiddleware
                          AuthMiddleware checks token and passes to handler
                          HelloHandler sends response
                          Control flows back up the chain for post-processing



GIN

Gin supports native chaining using c.Next() and abort flow using c.Abort().

                        r.Use(LoggerMiddleware())  // 1st
                        r.Use(AuthMiddleware())    // 2nd
                        r.GET("/home", handler)    // Final handler
                        
                        Client Request
                           ‚Üì
                        Global Middleware 1 (Logger)
                           ‚Üì
                        Global Middleware 2 (Auth)
                           ‚Üì
                        Route Handler
                           ‚Üë
                        Post-processing of Auth (if any)
                           ‚Üë
                        Post-processing of Logger (if any)
                           ‚Üë
                        Response sent to Client


üîÅ Flow Control Keywords in Gin:
        c.Next() ‚Üí continue to next middleware or handler
        c.Abort() ‚Üí stop middleware chain and return immediately
        c.AbortWithStatus() / c.AbortWithStatusJSON() ‚Üí abort and respond with error
        

c.Next
      func Logger() gin.HandlerFunc {
      	return func(c *gin.Context) {
      		log.Println("Logger: before")
      		c.Next()
      		log.Println("Logger: after")
      	}
      }
      
      func Auth() gin.HandlerFunc {
      	return func(c *gin.Context) {
      		if c.GetHeader("Authorization") != "valid" {
      			c.AbortWithStatusJSON(401, gin.H{"error": "Unauthorized"})
      			return
      		}
      		log.Println("Auth: passed")
      		c.Next()
      	}
      }



C.Abort
        func AuthMiddleware() gin.HandlerFunc {
        	return func(c *gin.Context) {
        		if c.GetHeader("Authorization") != "valid-token" {
        			c.JSON(401, gin.H{"error": "Unauthorized"})
        			c.Abort() // stops the chain
        			return
        		}
        		c.Next()
        	}
        }
