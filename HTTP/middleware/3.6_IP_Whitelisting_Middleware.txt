IP Whitelisting Middleware allows only requests from approved (whitelisted) 
IP addresses to access your server routes. 
Any other IPs get blocked automatically.

This is used for security, especially for admin routes, internal tools, or sensitive data access.

package main

import (
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

// List of allowed IPs
var whitelist = []string{
	"127.0.0.1",        // localhost
	"192.168.1.100",    // example internal IP
}

// Middleware function
func IPWhitelistMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		clientIP := c.ClientIP()

		// Check if clientIP is in the whitelist
		allowed := false
		for _, ip := range whitelist {
			if strings.TrimSpace(ip) == clientIP {
				allowed = true
				break
			}
		}

		if !allowed {
			c.AbortWithStatusJSON(http.StatusForbidden, gin.H{"error": "Access denied"})
			return
		}

		c.Next()
	}
}

// Protected route
func ProtectedEndpoint(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "Access granted"})
}

// Main
func main() {
	r := gin.Default()

	// Apply middleware to specific route group
	protected := r.Group("/admin")
	protected.Use(IPWhitelistMiddleware())
	{
		protected.GET("/dashboard", ProtectedEndpoint)
	}

	r.Run(":8080")
}


ðŸ§  How It Works:
When a request hits /admin/dashboard, the middleware captures the client's IP (c.ClientIP()).
It checks if the IP is present in the whitelist slice.
If not found, the request is aborted with 403 Forbidden.
If found, the request continues to the handler.
