7.2_Using_Middleware_from_Gin_Ecosystem
Gin, a popular web framework in Go, has a rich ecosystem of third-party middleware that 
extends its capabilities for real-world needs like logging, security, performance, 
rate-limiting, etc.


What Is "Middleware from Gin Ecosystem"?
Middleware in the Gin ecosystem refers to reusable components that plug 
into the requestâ€“response lifecycle to add cross-cutting functionality like:
              Logging
              Authentication
              CORS
              GZIP Compression
              Panic Recovery
              Metrics, etc.
These middleware are either:
              Built-in to Gin (gin.Logger(), gin.Recovery())
              Maintained by the Gin community
              Integrated via third-party libraries (e.g., gin-contrib)


ðŸ“¦ Commonly Used Middleware from the Gin Ecosystem
 Middleware          Package                                                           Description                                     
 Logger          `gin.Logger()`                                                    Logs incoming requests and response times       
 Recovery        `gin.Recovery()`                                                  Recovers from panics and returns 500 errors     
 CORS            `github.com/gin-contrib/cors`                                     Enables Cross-Origin Resource Sharing           
 GZIP            `github.com/gin-contrib/gzip`                                     Compresses responses using gzip                 
 Secure Headers  `github.com/gin-contrib/secure`                                   Adds security headers like HSTS, XSS protection 
 Sessions        `github.com/gin-contrib/sessions`                                 Supports session storage (cookies, Redis, etc.) 
 JWT Auth        `github.com/appleboy/gin-jwt/v2`                                  Middleware for JWT authentication               
 Rate Limit      `github.com/ulule/limiter` or `github.com/gin-contrib/ratelimit`  Limits number of requests per IP/user           


Integrate:
            package main
            
            import (
            	"github.com/gin-gonic/gin"
            	"github.com/gin-contrib/cors"
            	"time"
            )
            
            func main() {
            	r := gin.Default()
            
            	// Use CORS middleware
            	r.Use(cors.New(cors.Config{
            		AllowOrigins:     []string{"http://localhost:3000"},
            		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE"},
            		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
            		ExposeHeaders:    []string{"Content-Length"},
            		AllowCredentials: true,
            		MaxAge:           12 * time.Hour,
            	}))
            
            	r.GET("/ping", func(c *gin.Context) {
            		c.JSON(200, gin.H{"message": "pong"})
            	})
            
            	r.Run(":8080")
            }
