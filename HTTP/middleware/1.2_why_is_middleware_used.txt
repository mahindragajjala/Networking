Middleware is used in web development to separate concerns and add 
reusable, 
centralized processing logic 
for HTTP requests and responses. 

It helps simplify the application by isolating repetitive or
cross-cutting tasks outside of route handlers or business logic.

ðŸ”‘ Key Reasons for Using Middleware
Code Reusability
              Common logic like logging, security checks, and headers can be written 
              once and reused across routes.

Separation of Concerns
                      Middleware helps keep route handlers clean by 
                      offloading tasks like validation, authentication, 
                      or parsing to external components.

Centralized Processing
                  Centralizing logic (e.g., error handling or CORS configuration) 
                  ensures consistency and avoids code duplication.

Request & Response Manipulation
                        Middleware can modify request data (e.g., adding user info 
                        after decoding a JWT) or response headers 
                        (e.g., setting caching policies).

Security Enforcement
                      Authentication, authorization, input sanitization, 
                      and rate limiting are commonly enforced through middleware.

Error Handling & Recovery
              Middleware can catch and format errors, ensuring a consistent error 
              response structure.

Performance Enhancements
                  Middleware like gzip compression, caching, or response throttling 
                  can improve application performance.

Pre/Post Processing Hooks
                Run logic before hitting the main route handler (e.g., validation)
                or after it (e.g., analytics or logging).

ðŸ“Œ Example Use Cases
 Use Case             Middleware Role                                        
 User Authentication  Checks token and attaches user info to request         
 Logging              Logs request paths and response status codes           
 CORS                 Adds headers for cross-origin requests                 
 Panic Recovery       Prevents crashes and returns proper error response     
 Request Validation   Checks for valid JSON structure or required parameters 

