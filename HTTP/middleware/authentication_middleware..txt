AUTHENTICATION MIDDLEWARE 
Definition:
          Authentication is the process of verifying the identity of a user or system.

Purpose:
        To confirm that someone is who they claim to be.

Real-life Analogy:
                  Think of unlocking your phone with a fingerprint or password 
                  ‚Äî you‚Äôre proving your identity to the system.

In Programming:
                A user provides credentials (username/password, token, fingerprint, etc.).
                The system checks these credentials against a database or identity provider.
                If they match, the user is authenticated (i.e., "logged in").
                Examples in Code:
                                  Login form in a web app
                                  JWT token validation
                                  OAuth sign-in with Google/Facebook


We'll create a middleware that checks for a valid token in the request header. 
If the token is missing or invalid, the middleware will block the request and return a 401 Unauthorized.

SERVER SIDE:
                                package main
                                
                                import (
                                    "github.com/gin-gonic/gin"
                                    "net/http"
                                )
                                
                                // This is a simple token for demonstration purposes
                                const validToken = "secrettoken123"
                                
                                // Authentication middleware
                                func AuthMiddleware() gin.HandlerFunc {
                                    return func(c *gin.Context) {
                                        token := c.GetHeader("Authorization")
                                
                                        if token == "" {
                                            c.JSON(http.StatusUnauthorized, gin.H{"error": "Authorization token required"})
                                            c.Abort() // stop the request from going further
                                            return
                                        }
                                
                                        if token != validToken {
                                            c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
                                            c.Abort()
                                            return
                                        }
                                
                                        // Token is valid; move to the next handler
                                        c.Next()
                                    }
                                }
                                
                                func main() {
                                    router := gin.Default()
                                
                                    // Protected route group
                                    authorized := router.Group("/secure")
                                    authorized.Use(AuthMiddleware()) // apply auth middleware here
                                
                                    authorized.GET("/data", func(c *gin.Context) {
                                        c.JSON(http.StatusOK, gin.H{
                                            "message": "‚úÖ You have access to secure data!",
                                        })
                                    })
                                
                                    // Public route
                                    router.GET("/public", func(c *gin.Context) {
                                        c.JSON(http.StatusOK, gin.H{
                                            "message": "üåç This is a public endpoint.",
                                        })
                                    })
                                
                                    router.Run(":8080")
                                }


CLIENT SIDE:
                                package main
                                
                                import (
                                    "bytes"
                                    "fmt"
                                    "io/ioutil"
                                    "net/http"
                                )
                                
                                func makeRequest(method, url string, token string) {
                                    client := &http.Client{}
                                
                                    req, err := http.NewRequest(method, url, nil)
                                    if err != nil {
                                        fmt.Println("‚ùå Error creating request:", err)
                                        return
                                    }
                                
                                    // Set token if provided
                                    if token != "" {
                                        req.Header.Set("Authorization", token)
                                    }
                                
                                    // Send the request
                                    resp, err := client.Do(req)
                                    if err != nil {
                                        fmt.Println("‚ùå Error sending request:", err)
                                        return
                                    }
                                    defer resp.Body.Close()
                                
                                    // Read response
                                    body, _ := ioutil.ReadAll(resp.Body)
                                    fmt.Println("‚û°Ô∏è Request URL:", url)
                                    fmt.Println("üîê Token:", token)
                                    fmt.Println("üì• Status Code:", resp.StatusCode)
                                    fmt.Println("üìÑ Response Body:", string(body))
                                    fmt.Println("-------------------------------------")
                                }
                                
                                func main() {
                                    baseURL := "http://localhost:8080"
                                
                                    // 1. Public request (no token needed)
                                    makeRequest("GET", baseURL+"/public", "")
                                
                                    // 2. Secure request without token
                                    makeRequest("GET", baseURL+"/secure/data", "")
                                
                                    // 3. Secure request with invalid token
                                    makeRequest("GET", baseURL+"/secure/data", "wrongtoken")
                                
                                    // 4. Secure request with valid token
                                    makeRequest("GET", baseURL+"/secure/data", "secrettoken123")
                                }


                                  Client
                                    ‚Üì
                                  Gin Router
                                    ‚Üì
                                  Group /secure
                                    ‚Üì
                                  AuthMiddleware
                                    ‚îú‚îÄ‚îÄ if token missing     ‚Üí return 401
                                    ‚îú‚îÄ‚îÄ if token invalid     ‚Üí return 401
                                    ‚îî‚îÄ‚îÄ if token is correct  ‚Üí continue
                                    ‚Üì
                                  Route Handler (/data)
                                    ‚Üì
                                  Response


üîê /secure/data (Protected Route):
Requires header: Authorization: secrettoken123
If:
‚úÖ Token is valid ‚Üí handler runs ‚Üí secure message returned
‚ùå Token is missing or wrong ‚Üí middleware stops request with 401

üåç /public (Unprotected Route):
No auth needed
Always returns response

üîÅ Test It With curl:
# ‚úÖ Access public route
curl http://localhost:8080/public

# ‚ùå Access secure route without token
curl http://localhost:8080/secure/data

# ‚ùå Access secure route with invalid token
curl -H "Authorization: wrongtoken" http://localhost:8080/secure/data

# ‚úÖ Access secure route with valid token
curl -H "Authorization: secrettoken123" http://localhost:8080/secure/data





üìå Real-World Enhancements
                      In production:
                      Use JWT tokens, not plain strings.
                      Use Bearer <token> format.
                      Validate tokens using libraries like github.com/golang-jwt/jwt.


