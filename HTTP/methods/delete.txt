The DELETE method is used to delete a resource from the server, identified by its URI (e.g., /users/123).
‚úÖ Use it when you want to remove or deactivate an object permanently or logically.

characteristics of  delete
 Feature            Description                                               
 Purpose        Remove a resource from the server                         
 Data Location  Typically no request body (only uses the URI)         
 Idempotent     ‚úÖ Yes ‚Äì calling DELETE multiple times has the same effect 
 Safe           ‚ùå No ‚Äì it changes server state                            
 Cacheable?     ‚ùå No ‚Äì DELETE responses should not be cached              
 Common Status  `200 OK`, `204 No Content`, `404 Not Found`               




Client:
    ‚Üì
DELETE /users/123

Server:
    ‚Üì
If user exists ‚Üí delete ‚Üí return 200/204
Else ‚Üí return 404


      

                                                    CLIENT SIDE
üì≤ Client-Side Behavior
                    Uses the DELETE method
                    Includes the resource ID in the URL
                    Typically no body (but some APIs allow it)

Example:
DELETE /users/123 HTTP/1.1
Host: example.com

      
                                                  SERVER SIDE
          Parses the request URI (/users/123)
          Finds the resource by ID
          Deletes it (hard delete or soft delete)
Responds with:
              204 No Content (successful delete, no body)
              200 OK (successful delete with message)
              404 Not Found (if resource doesn‚Äôt exist)

      
                                            CLIENT CODE
package main

import (
    "fmt"
    "io"
    "net/http"
)

func main() {
    client := &http.Client{}

    req, err := http.NewRequest(http.MethodDelete, "http://localhost:8080/users/123", nil)
    if err != nil {
        fmt.Println("Request creation error:", err)
        return
    }

    resp, err := client.Do(req)
    if err != nil {
        fmt.Println("Request failed:", err)
        return
    }
    defer resp.Body.Close()

    body, _ := io.ReadAll(resp.Body)
    fmt.Println("Response:")
    fmt.Println(string(body))
}

                                            SERVER CODE      
package main

import (
    "net/http"
    "github.com/gin-gonic/gin"
)

type User struct {
    Name  string `json:"name"`
    Email string `json:"email"`
}

var users = map[string]User{
    "123": {Name: "Ravi", Email: "ravi@example.com"},
    "456": {Name: "Anjali", Email: "anjali@example.com"},
}

func main() {
    r := gin.Default()

    r.DELETE("/users/:id", deleteUserHandler)

    r.Run(":8080")
}

func deleteUserHandler(c *gin.Context) {
    id := c.Param("id")

    if _, exists := users[id]; !exists {
        c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
        return
    }

    delete(users, id)

    c.JSON(http.StatusOK, gin.H{
        "message": "User deleted successfully",
        "user_id": id,
    })
}
      
