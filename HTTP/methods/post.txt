What is the POST Method?
The HTTP POST method is used to submit data to the server, often resulting 
in a change in server state (e.g., adding a record to a database).





‚úÖ It‚Äôs commonly used for:
                          Creating new resources
                          Submitting form data
                          Uploading files
                          Sending JSON payloads via API



                          üß† Key Characteristics of POST
Feature	Description
Purpose	                 Submit data to server (write/create operation)
Data Placement	         Sent in the request body (not URL)
Safe?	                   ‚ùå Not safe (can change server state)
Idempotent?              ‚ùå Not idempotent ‚Äî repeated requests may cause multiple entries
Cacheable?	             ‚ùå Usually not cached

CLIENT-SIDE
When the client sends a POST request:
                  Constructs the URL and method (POST)
                  Adds headers like Content-Type: application/json
                  Places data (JSON, form data, etc.) in the request body
                  Sends it over HTTP to the server

EXAMPLE:
        POST /users HTTP/1.1
        Host: example.com
        Content-Type: application/json
        
        {
          "name": "Ravi",
          "email": "ravi@example.com"
        }

SERVER-SIDE
  Upon receiving a POST request:
            Parses headers and content type
            Reads the body (e.g., JSON, form-data)
            Validates and processes the input
            Creates or modifies a resource
            Responds with status code:
                      201 Created (on success)
                      400 Bad Request (validation error)
                      500 Internal Server Error (logic failure)



                          Client:
                              ‚Üì
                          POST /users
                              Body: {"name": "Ravi"}
                          
                          Server:
                              ‚Üì
                          Validates ‚Üí Adds to DB ‚Üí Sends back 201 Created + ID


                                SERVER CODE
package main

import (
    "net/http"
    "github.com/gin-gonic/gin"
)

type User struct {
    Name  string `json:"name" binding:"required"`
    Email string `json:"email" binding:"required,email"`
}

func main() {
    r := gin.Default()

    r.POST("/users", createUserHandler)

    r.Run(":8080")
}

func createUserHandler(c *gin.Context) {
    var user User
    if err := c.ShouldBindJSON(&user); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }

    c.JSON(http.StatusCreated, gin.H{
        "message": "User created successfully",
        "user":    user,
    })
}



                              CLIENT CODE
package main

import (
    "bytes"
    "fmt"
    "io"
    "net/http"
)

func main() {
    jsonData := []byte(`{"name":"Ravi","email":"ravi@example.com"}`)

    resp, err := http.Post("http://localhost:8080/users", "application/json", bytes.NewBuffer(jsonData))
    if err != nil {
        fmt.Println("Request failed:", err)
        return
    }
    defer resp.Body.Close()

    body, _ := io.ReadAll(resp.Body)
    fmt.Println("Response:")
    fmt.Println(string(body))
}


USE CASES
 Use Case                 API Endpoint  Description                    
 Create user          `/users`      Register a new user            
 Add product to cart  `/cart`       Submit product ID and quantity 
 Submit feedback      `/feedback`   User sends form data           
 Login                `/login`      Send credentials, get a token  
 File Upload          `/upload`     Upload images or files         


Add validation logic, or
Try a POST form with HTML instead of JSON?
Add file upload using multipart/form-data?
