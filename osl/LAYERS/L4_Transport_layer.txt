the most important and powerful layers for programmers, developers, and network engineers:

ðŸšš "Ensures complete data transfer between two devices â€” reliably or unreliably."

                      WHAT IT DOES(CORE IDEA)

The Transport Layer:
                    Ensures that data packets reach the right application on the destination machine.
                    Adds "reliability", "ordering", and "error recovery" (in TCP).
                    Offers faster but unreliable delivery (in UDP).
                    Uses port numbers to distinguish between applications.

CORE RESPONSIBILITIES:
| Feature                          | Description                                                              |
| Segmentation/Reassembly          | Breaks large messages into chunks (segments), reassembles at destination |
| Connection Control               | Handles session setup/teardown (TCP: connection-oriented)                |
| Reliability                      | Ensures all segments arrive, in order, without error (only in TCP)       |
| Flow Control                     | Prevents sender from overwhelming receiver                               |
| Error Detection & Retransmission | Lost or corrupted packets are resent (TCP only)                          |
| Multiplexing                     | Uses port numbers to deliver data to the correct app                 |

                                KEY PROTOCOLS
| Protocol                            | Use Case                  | Reliability           | Example                    |
| TCP (Transmission Control Protocol) | Web, email, file transfer | Reliable, ordered     | HTTP, HTTPS, FTP           |
| UDP (User Datagram Protocol)        | Speed over reliability    | Unreliable, unordered | DNS, video streaming, VoIP |

                                PORT NUMBERS
Each application running on a device is identified by a port number:
                        | Service    | Port             |
                        | ---------- | ---------------- |
                        | HTTP       | 80               |
                        | HTTPS      | 443              |
                        | FTP        | 21               |
                        | SSH        | 22               |
                        | DNS        | 53               |
                        | Custom app | e.g., 5000, 3000 |
ðŸ“Œ Think of IP Address as the building, and Port Number as the apartment.

                             TCP: The Reliable One
TCP ensures:

3-Way Handshake:
                SYN â†’ SYN-ACK â†’ ACK (connection established)

Acknowledgement of every segment
Sequence Numbers to track order
Retransmission if something is lost
Flow control using window size
Connection teardown (FIN/ACK)

                        ðŸ§° Real-Life Example (TCP)
When you open https://google.com:

              Your browser starts a TCP connection (port 443).
              Data (HTML, JS, images) is broken into segments.
              Every segment is ACKâ€™d by Google.
              If segment #4 is lost, Google resends just #4.

âš¡ UDP: The Fast One
              No connection setup or teardown.
              Just fire and forget â€” fastest delivery.
              No guarantee of delivery, order, or duplication handling.

ðŸ§° Real-Life Example (UDP)
When you make a WhatsApp Voice Call:
                      Voice data is sent using UDP.
                      If a packet drops, itâ€™s not resent (you miss 1 word, but it's fine).
                      Real-time is more important than reliability.

                     Troubleshooting at Layer 4
| Problem              | Symptom                                | Reason                      |
| -------------------- | -------------------------------------- | --------------------------- |
| Port closed          | App unreachable                        | Firewall or app not running |
| Packet loss          | Website loads slow or fails            | Congestion or network drops |
| Out of order packets | Corrupted downloads (TCP handles this) | Bad network path            |


